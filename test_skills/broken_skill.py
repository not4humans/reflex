"""
Auto-compiled skill: broken_skill (for testing validation failures)
Generated by Agentic Skill Compiler

Description: A deliberately broken skill for testing validation failure detection
Strategy: python_macro
Confidence: 90.00%
Estimated cost reduction: 50.0%

Pattern: broken_tool -> another_broken_tool
Support: 5
Success rate: 60.00%
Average cost: $3.00
"""

import asyncio
from typing import Any, Optional


# No tool registry - this will cause failures
tool_registry = None


async def broken_skill(param1: str, param2: int):
    """
    A deliberately broken skill for testing validation failure detection.
    This should fail unit tests due to missing tool registry.
    """
    
    # This will fail because tool_registry is None
    result = await tool_registry.execute("broken_tool", param=param1)
    
    # This line will never be reached
    return result


# Metadata for skill validation and monitoring
SKILL_METADATA = {
    "name": "broken_skill",
    "description": "A deliberately broken skill for testing validation failure detection",
    "parameters": ['param1', 'param2'],
    "strategy": "python_macro",
    "confidence": 0.90,
    "estimated_cost_reduction": 0.50,
    "pattern": ['broken_tool', 'another_broken_tool'],
    "support": 5,
    "success_rate": 0.60,  # Deliberately low success rate
    "avg_cost": 3.0
}


if __name__ == "__main__":
    # Example usage
    async def test_skill():
        print(f"Testing compiled skill: {SKILL_METADATA['name']}")
        try:
            result = await broken_skill("test", 123)
            print(f"Result: {result}")
        except Exception as e:
            print(f"Error: {e}")
    
    asyncio.run(test_skill())
