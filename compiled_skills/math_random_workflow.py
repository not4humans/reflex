"""
Compiled skill: Math and Random Number Generation
Generated by Agentic Skill Compiler - Demo Skill for Phase 6 Testing

This skill performs mathematical calculations and random number generation.
"""

import asyncio
import random
import math
from typing import Any, Dict

# Skill metadata for registry
SKILL_METADATA = {
    "skill_id": "math_random_workflow_demo",
    "name": "math_random_workflow",
    "description": "Perform mathematical calculations and generate random numbers",
    "pattern": ["math_calculator", "random_number"],
    "parameters": ["expression", "min_val", "max_val"],
    "strategy": "python_macro",
    "confidence": 0.78,
    "estimated_cost_reduction": 0.30,
    "success_rate": 0.92,
    "avg_cost": 0.12,
    "avg_latency_ms": 95.0,
    "created_at": "2024-12-24T15:31:00",
    "source_pattern_id": "pattern_math_random_002"
}


async def math_random_workflow(expression: str = "sqrt(16)", 
                             min_val: float = 1.0, 
                             max_val: float = 100.0) -> Dict[str, Any]:
    """
    Compiled skill that performs mathematical calculation and random number generation.
    
    This skill demonstrates the pattern of:
    1. Calculate mathematical expression
    2. Generate a random number in range
    
    Args:
        expression: Mathematical expression to evaluate
        min_val: Minimum value for random number
        max_val: Maximum value for random number
        
    Returns:
        Dict with calculation and random number results
    """
    
    # Simulate the original math_calculator tool
    await asyncio.sleep(0.04)  # Simulate processing time
    
    try:
        # Safe evaluation of mathematical expressions
        if "sqrt" in expression:
            # Handle sqrt specially
            import re
            match = re.search(r'sqrt\(([0-9.]+)\)', expression)
            if match:
                value = float(match.group(1))
                math_result = math.sqrt(value)
            else:
                math_result = 0.0
        elif "**" in expression or "^" in expression:
            # Handle exponents
            expr = expression.replace("^", "**")
            math_result = eval(expr, {"__builtins__": {}})
        else:
            # Simple arithmetic
            math_result = eval(expression, {"__builtins__": {}})
            
    except Exception as e:
        math_result = f"Error: {str(e)}"
    
    # Simulate the random_number tool
    await asyncio.sleep(0.02)  # Simulate random generation
    
    try:
        random_value = random.uniform(min_val, max_val)
        
        result = {
            "success": True,
            "math_result": math_result,
            "random_value": random_value,
            "expression": expression,
            "random_range": [min_val, max_val],
            "message": f"Calculated '{expression}' = {math_result}, generated random number {random_value:.3f}"
        }
        
        return result
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "expression": expression,
            "random_range": [min_val, max_val]
        }


# For testing the skill directly
async def main():
    """Test the compiled skill."""
    print("üß™ Testing compiled skill: math_random_workflow")
    
    test_cases = [
        {"expression": "sqrt(16)", "min_val": 1.0, "max_val": 10.0},
        {"expression": "2 ** 3", "min_val": 50.0, "max_val": 100.0},
        {"expression": "5 + 3 * 2", "min_val": 0.0, "max_val": 1.0},
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\\n--- Test {i} ---")
        print(f"Input: {test_case}")
        
        result = await math_random_workflow(**test_case)
        
        if result["success"]:
            print(f"‚úÖ Success: {result['message']}")
        else:
            print(f"‚ùå Failed: {result['error']}")


if __name__ == "__main__":
    asyncio.run(main())
